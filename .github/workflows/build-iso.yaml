name: Build remastered ISO

on:
  workflow_dispatch:
    inputs:
      iso_image_url:
        description: "URL of the Debian ISO"
        type: string
        required: false
      arch:
        description: "Architecture of the ISO image to generate"
        type: choice
        options: [amd64]
        required: true
        default: amd64
      type:
        description: "Type of the installation image"
        type: choice
        options: [netinst, dvd]
        required: true
        default: netinst
      branch:
        description: "The branch of debian to use"
        type: choice
        options: [stable, testing, sid]
        required: true
        default: stable

jobs:
  debian-desktop:
    runs-on: ubuntu-latest
    environment: build-iso-image

    env:
      ISO_IMAGE_URL: ${{ github.event.inputs.iso_image_url || vars.ISO_IMAGE_URL }}
      REMASTERED_ISO_IMAGE: preseed-debian-${{ github.event.inputs.branch }}-${{ github.event.inputs.type }}-${{ github.event.inputs.arch }}.iso
      ORIGINAL_ISO_IMAGE: debian.iso
      PRESEED_FILE_TEMPLATE: preseed.cfg.template
      PRESEED_FILE: preseed.cfg
      ISO_FILES_DIR: /media/debian

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ env.PRESEED_FILE_TEMPLATE }}
            ${{ env.ORIGINAL_ISO_IMAGE }}
            grub/themes/elegant-mojave-float-left-dark
          sparse-checkout-cone-mode: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext cpio isolinux xorriso gnupg

      - name: Download Debian ISO
        run: |
          if [ ! -f '${{ env.ORIGINAL_ISO_IMAGE }}' ]; then
            curl -L ${{ env.ISO_IMAGE_URL }} -o ${{ env.ORIGINAL_ISO_IMAGE }}
          fi

      - name: Extract ISO files
        run: |
          sudo mkdir -p ${{ env.ISO_FILES_DIR }}
          sudo xorriso \
            -osirrox on \
            -hardlinks on \
            -indev ${{ env.ORIGINAL_ISO_IMAGE }} \
            -extract / ${{ env.ISO_FILES_DIR }}
          sudo chown -R $USER:$USER ${{ env.ISO_FILES_DIR }}

      - name: Generate preseed file
        env:
          ROOT_PASSWORD_HASH: ${{ secrets.ROOT_PASSWORD_HASH }}
          USER_FULLNAME: ${{ vars.USER_FULLNAME }}
          USERNAME: ${{ vars.USERNAME }}
          USER_PASSWORD_HASH: ${{ secrets.USER_PASSWORD_HASH }}
        run: |
          envsubst < ${{ env.PRESEED_FILE_TEMPLATE }} > ${{ env.PRESEED_FILE }}

      - name: Modify initrd and add preseed file (text installer)
        env:
          INSTALL_DIR: ${{ env.ISO_FILES_DIR }}/install.amd
        run: |
          set -euo pipefail
          INITRD="${{ env.INSTALL_DIR }}/initrd.gz"
          [ -f "$INITRD" ] || { echo "ERROR: $INITRD not found"; exit 1; }
          chmod +w -R ${{ env.INSTALL_DIR }}
          gunzip ${{ env.INSTALL_DIR }}/initrd.gz
          echo ${{ env.PRESEED_FILE }} | cpio -H newc -o -A -F ${{ env.INSTALL_DIR }}/initrd
          gzip ${{ env.INSTALL_DIR }}/initrd
          chmod -w -R ${{ env.INSTALL_DIR }}

      - name: Modify initrd and add preseed file (graphical installer)
        env:
          INSTALL_DIR: ${{ env.ISO_FILES_DIR }}/install.amd/gtk
        run: |
          set -euo pipefail
          INITRD="${{ env.INSTALL_DIR }}/initrd.gz"
          [ -f "$INITRD" ] || { echo "ERROR: $INITRD not found"; exit 1; }
          chmod +w -R ${{ env.INSTALL_DIR }}
          gunzip ${{ env.INSTALL_DIR }}/initrd.gz
          echo ${{ env.PRESEED_FILE }} | cpio -H newc -o -A -F ${{ env.INSTALL_DIR }}/initrd
          gzip ${{ env.INSTALL_DIR }}/initrd
          chmod -w -R ${{ env.INSTALL_DIR }}

      - name: Add GRUB theme
        env:
          THEME_NAME: elegant-mojave-float-left-dark
          THEME_SRC: grub/themes/${{ env.THEME_NAME }}
          THEME_DST: ${{ env.ISO_FILES_DIR }}/boot/grub/themes/${{ env.THEME_NAME }}
        run: |
          set -euo pipefail
          mkdir -p "${{ env.THEME_DST }}" 
          cp -a "${{ env.THEME_SRC }}"/* "${{ env.THEME_DST }}"

          # Enable theme in EFI GRUB config if present
          GRUB_CFG_EFI="${{ env.ISO_FILES_DIR }}/boot/grub/grub.cfg"
          if [ -f "$GRUB_CFG_EFI" ]; then
            if ! grep -q "set theme=/boot/grub/themes/${{ env.THEME_NAME }}/theme.txt" "$GRUB_CFG_EFI"; then
              sed -i  '1i set theme=/boot/grub/themes/${{ env.THEME_NAME }}/theme.txt' "$GRUB_CFG_EFI"
            fi
          fi

          # Enable theme in BIOS GRUB config if present
          GRUB_CFG_BIOS="${{ env.ISO_FILES_DIR }}/boot/grub/x86_64-efi/grub.cfg"
          if [ -f "$GRUB_CFG_BIOS" ]; then
            if ! grep -q "set theme=/boot/grub/themes/${{ env.THEME_NAME }}/theme.txt" "$GRUB_CFG_BIOS"; then
              sed -i  '1i set theme=/boot/grub/themes/${{ env.THEME_NAME }}/theme.txt' "$GRUB_CFG_BIOS"
            fi
          fi

      - name: Regenerate md5sum.txt
        working-directory: ${{ env.ISO_FILES_DIR }}
        run: |
          chmod +w md5sum.txt
          find -follow -type f ! -name md5sum.txt -print0 | xargs -0 md5sum > md5sum.txt
          chmod -w md5sum.txt

      - name: Create new bootable ISO
        env:
          ORIGINAL_ISO: ${{ env.ORIGINAL_ISO_IMAGE }}
          NEW_FILES: ${{ env.ISO_FILES_DIR }}
          NEW_ISO: ${{ env.REMASTERED_ISO_IMAGE }}
          MBR_TEMPLATE: /usr/lib/ISOLINUX/isohdpfx.bin
          # Note: FS_NAME must be at most 32 characters long
          FS_NAME: "Debian ${{ github.event.inputs.branch }} preseed ${{ github.event.inputs.arch }}"
        run: |
          # Extract MBR template file to disk
          sudo dd if=${{ env.ORIGINAL_ISO }} bs=1 count=432 of=${{ env.MBR_TEMPLATE }}

          # Create the new ISO image
          xorriso \
            -as mkisofs \
            -r -V '${{ env.FS_NAME }}' \
            -o ${{ env.NEW_ISO }} \
            -J -joliet-long -cache-inodes \
            -isohybrid-mbr ${{ env.MBR_TEMPLATE }} \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -boot-load-size 4 -boot-info-table -no-emul-boot \
            -eltorito-alt-boot \
            -e boot/grub/efi.img \
            -no-emul-boot -isohybrid-gpt-basdat -isohybrid-apm-hfsplus \
            ${{ env.NEW_FILES }}

      - name: Encrypt ISO artifact
        env:
          ISO_IMAGE: ${{ env.REMASTERED_ISO_IMAGE }}
          ENCRYPTED_ISO_IMAGE: ${{ env.REMASTERED_ISO_IMAGE }}.gpg
        run: |
          printf '%s' '${{ secrets.GPG_PUBLIC_KEY }}' | gpg --batch --yes --import -
          gpg --batch --yes --no-tty --quiet \
            --trust-model always \
            --compress-level 0 \
            --recipient ${{ secrets.GPG_RECIPIENT_FINGERPRINT }} \
            --output  ${{ env.ENCRYPTED_ISO_IMAGE }} \
            --encrypt ${{ env.ISO_IMAGE }}

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: remastered-iso
          path: ${{ env.REMASTERED_ISO_IMAGE }}.gpg
          if-no-files-found: warn
          overwrite: true
          compression-level: 0
          retention-days: 1
